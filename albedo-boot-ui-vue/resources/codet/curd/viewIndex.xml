<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>viewComponentHtml</name>
    <filePath>src/views/${lastPackageName}/${moduleName}/${subModuleName}/${className}</filePath>
    <fileName>index.vue</fileName>
    <content><![CDATA[
<template>
  <div class="app-container calendar-list-container">
    <div class="filter-container">
      <el-form :inline="true">
      <#list table.columnList as c>
      <#if c.isQuery?? && c.isQuery == 1>
        <el-form-item label="${c.title}">
          <#if c.showType == "input" || c.showType == "textarea">
              <el-input class="filter-item input-normal" v-model="listQuery.${c.javaFieldId}"></el-input>
          <#elseif c.showType == "select">
              <AvueCrudSelect v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudSelect>
          <#elseif c.showType == "checkbox">
              <AvueCrudCheckbox v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudCheckbox>
          <#elseif c.showType == "radio">
              <AvueCrudRadio v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudRadio>
          <#elseif c.showType == "dateselect">
              <el-date-picker v-model="form.${c.javaFieldId}" type="datetimerange"
                range-separator="至"
                start-placeholder="开始日期"
                end-placeholder="结束日期">
              </el-date-picker>
          </#if>
        </el-form-item>
      </#if>
      </#list>
        <el-form-item>
          <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查询</el-button>
          <el-button v-if="${permissionPrefix}_edit" class="filter-item" style="margin-left: 10px;" @click="handleEdit" type="primary" icon="edit">添加</el-button>
        </el-form-item>
      </el-form>
    </div>

    <el-table :key='tableKey' :data="list" v-loading="listLoading" element-loading-text="加载中..." border fit highlight-current-row style="width: 99%">
      <#list table.columnList as column>
      <#if column.isList?? && column.isList == 1 && column.simpleJavaField!="parentId" && column.simpleJavaField!="parentIds" && column.simpleJavaField!="parent">
      <el-table-column align="center" label="${column.title}">
        <template slot-scope="scope">
        <#if column.simpleJavaField = 'status'>
          <el-tag>{{scope.row.${column.simpleJavaField}}}</el-tag>
        <#else>
          <span>{{scope.row.${column.simpleJavaField}}}</span>
         </#if>
        </template>
      </el-table-column>
      </#if>
      </#list>
      <el-table-column align="center" fixed="right" label="操作" v-if="${permissionPrefix}_edit || ${permissionPrefix}_lock || ${permissionPrefix}_delete">
        <template slot-scope="scope">
          <el-button v-if="${permissionPrefix}_edit" icon="icon-edit" title="编辑" type="text" @click="handleEdit(scope.row)">
          </el-button>
          <el-button v-if="${permissionPrefix}_lock" :icon="scope.row.status=='正常' ? 'icon-lock' : 'icon-unlock'" :title="scope.row.status=='正常' ? '锁定' : '解锁'" type="text" @click="handleLock(scope.row)">
          </el-button>
          <el-button v-if="${permissionPrefix}_delete" icon="icon-delete" title="删除" type="text" @click="handleDelete(scope.row)">
          </el-button>
        </template>
      </el-table-column>

    </el-table>

    <div v-show="!listLoading" class="pagination-container">
      <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.page" :page-sizes="[10,20,30, 50]" :page-size="listQuery.size" layout="total, sizes, prev, pager, next, jumper" :total="total">
      </el-pagination>
    </div>
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :model="form" ref="form" label-width="100px">

      <#list table.columnList as c>
        <#if c.isEdit?? && c.isEdit == 1 && (c.isNotBaseField || c.simpleJavaField == 'description')>
        <el-form-item label="${c.title}" prop="${c.javaFieldId}" :rules="[<#if !c.nullable>{required: true,message: '请输入${c.title}'},</#if><#if c.javaType == "Long" || c.javaType == "Integer">{validator:validateDigits},</#if><#if c.javaType == "java.math.BigDecimal" || c.javaType == "Double">{ validator:validateNumber},</#if><#if c.dataLength != "0">{min: 0,max: ${c.dataLength},message: '长度在 0 到 ${c.dataLength} 个字符'},</#if><#if c.unique && !c.pk>{validator:validateUnique}</#if>]">
            <#if c.showType == "input">
                <el-input v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "textarea">
                <el-input type="textarea" v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "select">
              <AvueCrudSelect v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudSelect>
            <#elseif c.showType == "checkbox">
              <AvueCrudCheckbox v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudCheckbox>
            <#elseif c.showType == "radio">
              <AvueCrudRadio v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudRadio>
            <#elseif c.showType == "dateselect">
              <el-date-picker v-model="form.${c.javaFieldId}" type="datetime" >
              </el-date-picker>
           </#if>
        </el-form-item>
        </#if>
    </#list>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="cancel()">取 消</el-button>
        <el-button type="primary" @click="save()">保 存</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { page${ClassName}, find${ClassName}, save${ClassName}, lock${ClassName}, remove${ClassName} } from "./service";
import { mapGetters } from "vuex";
import {DATA_STATUS} from "@/const/common";
import {isValidateUnique, isValidateNumber, isValidateDigits, objectToString, toStr, validateNull} from "@/util/validate";
import {MSG_TYPE_SUCCESS} from "@/const/common";
import {parseJsonItemForm} from "@/util/util";

export default {
  components: {
  },
  name: "table_${permissionPrefix}",
  data() {
    return{
      list: null,
      total: null,
      listLoading: true,
      listQuery: {
        page: 1,
        size: 20
      },
      form: {
        <#list table.columnList as c>
        <#if c.isEdit?? && c.isEdit == 1 && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: undefined,
        </#if>
        </#list>
      },
      validateUnique: (rule, value, callback) => {
          isValidateUnique(rule, value, callback, '/test/testTree/checkByProperty?id='+toStr(this.form.id))
        },
        validateNumber: (rule, value, callback) => {
          isValidateNumber(rule, value, callback)
        },
        validateDigits: (rule, value, callback) => {
          isValidateDigits(rule, value, callback)
        },
      <#list table.columnList as c>
        <#if c.dictType??&& c.dictType != ''>
      ${c.javaFieldId}Options: undefined,
        </#if>
       </#list>
      dialogFormVisible: false,
      dialogStatus: 'create',
      textMap: {
        update: '编辑${functionNameSimple}',
        create: '创建${functionNameSimple}'
      },
      tableKey: 0
    };
  },
  computed: {
    ...mapGetters(["authorities","dicts"])
  },
  filters: {
  },
  created() {
    this.getList();
    this.${permissionPrefix}_edit = this.authorities.indexOf("${permissionPrefix}_edit") !== -1;
    this.${permissionPrefix}_lock = this.authorities.indexOf("${permissionPrefix}_lock") !== -1;
    this.${permissionPrefix}_delete = this.authorities.indexOf("${permissionPrefix}_delete") !== -1;
    <#assign index = 0 /><#list table.columnList as c><#if c.dictType?? && c.dictType != ''>
    this.${c.javaFieldId}Options = this.dicts["${c.dictType}"];
    <#assign index = index+1 />
    </#if></#list>
  },
  methods: {
    getList() {
      this.listLoading = true;
      this.listQuery.isAsc = false;
      this.listQuery.queryConditionJson = parseJsonItemForm([
      <#list table.columnList as c><#if c.isQuery?? && c.isQuery == 1>
      {fieldName: '${c.javaFieldId}',value:this.listQuery.${c.javaFieldId},operate:'${c.queryType}',attrType:'${c.javaType}'},
      </#if></#list>
      ])
      page${ClassName}(this.listQuery).then(response => {
        this.list = response.data;
        this.total = response.total;
        this.listLoading = false;
      });
    },
    handleFilter() {
      this.listQuery.page = 1;
      this.getList();
    },
    handleSizeChange(val) {
      this.listQuery.size = val;
      this.getList();
    },
    handleCurrentChange(val) {
      this.listQuery.page = val;
      this.getList();
    },
    handleEdit(row) {
      this.resetForm();
      this.dialogStatus = row && !validateNull(row.id)? "update" : "create";
      if(this.dialogStatus == "create"){
        this.dialogFormVisible = true;
      }else{
        find${ClassName}(row.id).then(response => {
          this.form = response.data;
          this.form.status=objectToString(this.form.status)
          this.dialogFormVisible = true;
        });
      }
    },
    handleLock: function (row) {
      lock${ClassName}(row.id).then((data) => {
        if (data.status == MSG_TYPE_SUCCESS) {
          this.getList();
        }
      });
    },
    cancel() {
      this.dialogFormVisible = false;
      this.$refs['form'].resetFields();
    },
    save() {
      const set = this.$refs;
      set['form'].validate(valid => {
        if (valid) {
          save${ClassName}(this.form).then((data) => {
            if (data.status == MSG_TYPE_SUCCESS) {
              this.getList();
              this.cancel('form')
            }
          });
        } else {
          return false;
        }
      });
    },
    handleDelete(row) {
      this.$confirm(
        "此操作将永久删除该${functionNameSimple}, 是否继续?",
        "提示",
        {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }
      ).then(() => {
        remove${ClassName}(row.id).then((data) => {
            if (data.status == MSG_TYPE_SUCCESS) {
              this.getList();
            }
          });
      });
    },
    handleLock(row) {
      lock${ClassName}(row.id).then((data) => {
        if (data.status == MSG_TYPE_SUCCESS) {
          this.getList();
        }
      });
    },
    resetForm() {
      this.form = {
        <#list table.columnList as c>
        <#if c.isEdit?? && c.isEdit == 1 && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: "",
        </#if>
        </#list>
      };
      this.$refs['form']&&this.$refs['form'].resetFields();
    }
  }
};
</script>

]]>
    </content>
</template>
