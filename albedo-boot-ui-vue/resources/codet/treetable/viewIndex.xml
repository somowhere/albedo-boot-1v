<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>viewComponentHtml</name>
    <filePath>src/views/${lastPackageName}/${moduleName}/${subModuleName}/${className}</filePath>
    <fileName>index.vue</fileName>
    <content><![CDATA[

<template>
  <div class="app-container calendar-list-container">
    <el-row :gutter="20">
      <el-col :span="5">
        <el-card class="box-card">
          <div slot="header" class="clearfix">
            <span>${functionNameSimple}</span>
            <el-button type="text" style="float: right; padding: 3px 0" icon="icon-filesearch" title="搜索" @click="searchTree=(searchTree ? false:true)"></el-button>
            <el-button type="text" style="float: right; padding: 3px 0" icon="icon-reload" title="刷新" @click="getTree()"></el-button>
          </div>
          <el-input v-show="searchTree"
            placeholder="输入关键字进行过滤"
            v-model="filterText">
          </el-input>
          <el-tree
            class="filter-tree"
            :data="treeData"
            ref="leftTree"
            node-key="id"
            highlight-current
            :expand-on-click-node="false"
            :filter-node-method="filterNode"
            @node-click="getNodeData">
          </el-tree>
        </el-card>
      </el-col>
      <el-col :span="19">
        <div class="filter-container">
            <el-form :inline="true">
            <#list table.columnList as c>
            <#if c.isQuery?? && c.isQuery == 1>
              <el-form-item label="${c.title}">
                <#if c.showType == "input" || c.showType == "textarea">
                    <el-input class="filter-item input-normal" v-model="listQuery.${c.javaFieldId}"></el-input>
                <#elseif c.showType == "select">
                    <AvueCrudSelect v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudSelect>
                <#elseif c.showType == "checkbox">
                    <AvueCrudCheckbox v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudCheckbox>
                <#elseif c.showType == "radio">
                    <AvueCrudRadio v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudRadio>
                <#elseif c.showType == "dateselect">
                    <el-date-picker v-model="form.${c.javaFieldId}" type="datetimerange"
                      range-separator="至"
                      start-placeholder="开始日期"
                      end-placeholder="结束日期">
                    </el-date-picker>
                </#if>
              </el-form-item>
            </#if>
            </#list>
              <el-form-item>
                <el-button class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查询</el-button>
                <el-button v-if="${permissionPrefix}_edit" class="filter-item" style="margin-left: 10px;" @click="handleEdit" type="primary" icon="edit">添加</el-button>
              </el-form-item>
            </el-form>
        </div>
        <el-table :data="list" v-loading="listLoading" element-loading-text="加载中..." border fit highlight-current-row style="width: 99%">
          <#list table.columnList as column>
          <#if column.isList?? && column.isList == 1 && column.simpleJavaField!="parentId" && column.simpleJavaField!="parentIds" && column.simpleJavaField!="parent">
          <el-table-column align="center" label="${column.title}">
            <template slot-scope="scope">
            <#if column.simpleJavaField = 'status'>
              <el-tag>{{scope.row.${column.simpleJavaField}}}</el-tag>
            <#else>
              <span>{{scope.row.${column.simpleJavaField}}}</span>
             </#if>
            </template>
          </el-table-column>
          </#if>
          </#list>
          <el-table-column align="center" fixed="right" label="操作" v-if="${permissionPrefix}_edit || ${permissionPrefix}_lock || ${permissionPrefix}_delete">
            <template slot-scope="scope">
            <el-button v-if="${permissionPrefix}_edit" icon="icon-edit" title="编辑" type="text" @click="handleEdit(scope.row)">
            </el-button>
            <el-button v-if="${permissionPrefix}_lock" :icon="scope.row.status=='正常' ? 'icon-lock' : 'icon-unlock'" :title="scope.row.status=='正常' ? '锁定' : '解锁'" type="text" @click="handleLock(scope.row)">
            </el-button>
            <el-button v-if="${permissionPrefix}_delete" icon="icon-delete" title="删除" type="text" @click="handleDelete(scope.row)">
            </el-button>
            </template>
          </el-table-column>

        </el-table>
        <div v-show="!listLoading" class="pagination-container">
            <el-pagination @size-change="handleSizeChange" @current-change="handleCurrentChange" :current-page.sync="listQuery.page" :page-sizes="[10,20,30, 50]" :page-size="listQuery.size" layout="total, sizes, prev, pager, next, jumper" :total="total">
            </el-pagination>
          </div>
      </el-col>
    </el-row>
    <el-dialog title="选择${functionNameSimple}" :visible.sync="dialog${ClassName}Visible">
      <el-input placeholder="输入关键字进行过滤"
                v-model="filterFormText">
      </el-input>
      <el-tree class="filter-tree" ref="formTree" :data="tree${ClassName}Data"
               check-strictly node-key="id" highlight-current @node-click="getNodeFormData"
               :filter-node-method="filterNode" default-expand-all>
      </el-tree>
    </el-dialog>
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible">
      <el-form :label-position="labelPosition" label-width="80px" :model="form" ref="form">
      <#list table.columnList as c>
        <#if c.simpleJavaField == 'parentId'>
        <el-form-item label="上级${functionNameSimple}" prop="parentName">
          <el-input v-model="form.parentName" placeholder="选择${functionNameSimple}" @focus="handle${ClassName}()" readonly></el-input>
          <input type="hidden" v-model="form.parentId" />
        </el-form-item>
        <#elseif c.isEdit?? && c.isEdit == 1 && (c.isNotBaseTreeField || c.simpleJavaField == 'name' || c.simpleJavaField == 'sort') && (c.isNotBaseField || c.simpleJavaField == 'description')>
        <el-form-item label="${c.title}" prop="${c.javaFieldId}" :rules="[<#if !c.nullable>{required: true,message: '请输入${c.title}'},</#if><#if c.javaType == "Long" || c.javaType == "Integer">{validator:validateDigits},</#if><#if c.javaType == "java.math.BigDecimal" || c.javaType == "Double">{ validator:validateNumber},</#if><#if c.dataLength != "0">{min: 0,max: ${c.dataLength},message: '长度在 0 到 ${c.dataLength} 个字符'},</#if><#if c.unique && !c.pk>{validator:validateUnique}</#if>]">
            <#if c.showType == "input">
                <el-input v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "textarea">
                <el-input type="textarea" v-model="form.${c.javaFieldId}"></el-input>
            <#elseif c.showType == "select">
              <AvueCrudSelect v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudSelect>
            <#elseif c.showType == "checkbox">
              <AvueCrudCheckbox v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudCheckbox>
            <#elseif c.showType == "radio">
              <AvueCrudRadio v-model="form.${c.javaFieldId}" :dic="${c.javaFieldId}Options"></AvueCrudRadio>
            <#elseif c.showType == "dateselect">
              <el-date-picker v-model="form.${c.javaFieldId}" type="datetime" >
              </el-date-picker>
           </#if>
        </el-form-item>
        </#if>
    </#list>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="cancel()">取 消</el-button>
        <el-button type="primary" @click="save()">保 存</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
  import {fetch${ClassName}Tree, find${ClassName}, save${ClassName}, remove${ClassName}, page${ClassName}} from "./service";
  import { mapGetters } from 'vuex'
  import {parseJsonItemForm, parseTreeData} from "@/util/util";
  import {dictCodes} from "@/api/dataSystem";
  import {isValidateUnique, isValidateNumber, isValidateDigits, objectToString, toStr, validateNotNull} from "@/util/validate";
  import {MSG_TYPE_SUCCESS} from "@/const/common";
  export default {
    name: 'module',
    data() {
      return {
        tree${ClassName}Data: [],
        dialog${ClassName}Visible: false,
        dialogFormVisible: false,
        list: null,
        total: null,
        listLoading: true,
        listQuery: {
          page: 1,
          size: 20
        },
        formEdit: true,
        filterText: '',
        filterFormText: '',
        formStatus: '',
        statusOptions: [],
        typeOptions: [],
        methodOptions: [],
        searchTree: false,
        treeData: [],
        labelPosition: 'right',
        form: {
          <#list table.columnList as c>
        <#if c.isEdit?? && c.isEdit == 1 && (c.isNotBaseTreeField || c.simpleJavaField == 'name' || c.simpleJavaField == 'sort') && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: undefined,
        </#if>
        </#list>
        },
        validateUnique: (rule, value, callback) => {
          isValidateUnique(rule, value, callback, '/test/testTree/checkByProperty?id='+toStr(this.form.id))
        },
        validateNumber: (rule, value, callback) => {
          isValidateNumber(rule, value, callback)
        },
        validateDigits: (rule, value, callback) => {
          isValidateDigits(rule, value, callback)
        },
        dialogStatus: 'create',
        textMap: {
          update: '编辑${functionNameSimple}',
          create: '创建${functionNameSimple}'
        },
        currentNode: {}
      }
    },
    watch: {
      filterText(val) {
        this.$refs['leftTree'].filter(val);
      },
      filterFormText(val) {
        this.$refs['formTree'].filter(val);
      }
    },
    created() {
      this.getTree()
      this.getList()
      this.${permissionPrefix}_edit = this.authorities.indexOf("${permissionPrefix}_edit") !== -1;
      this.${permissionPrefix}_lock = this.authorities.indexOf("${permissionPrefix}_lock") !== -1;
      this.${permissionPrefix}_delete = this.authorities.indexOf("${permissionPrefix}_delete") !== -1;

      dictCodes({codes:'<#list table.columnList as c><#if c.dictType?? && c.dictType != ''>${c.dictType},</#if></#list>'}).then(response => {
      <#assign index = 0 /><#list table.columnList as c><#if c.dictType?? && c.dictType != ''>
      this.${c.javaFieldId}Options = response.data[${index}];
      <#assign index = index+1 />
      </#if></#list>
      });
    },
    computed: {
      ...mapGetters([
        'authorities'
      ])
    },
    methods: {
      getList() {
        this.listLoading = true;
        this.listQuery.isAsc = false;
        this.listQuery.queryConditionJson = parseJsonItemForm([
        <#list table.columnList as c><#if c.isQuery?? && c.isQuery == 1>
        {fieldName: '${c.javaFieldId}',value:this.listQuery.${c.javaFieldId},operate:'${c.queryType}',attrType:'${c.javaType}'},
        </#if></#list>
        {fieldName: 'parentId',value:this.listQuery.parentId, attrType:'eq'},
        ])
        page${ClassName}(this.listQuery).then(response => {
          this.list = response.data;
          this.total = response.total;
          this.listLoading = false;
        });
      },
      getTree() {
        fetch${ClassName}Tree({all:true}).then(response => {
          this.treeData = parseTreeData(response.data);
        })
      },
      filterNode(value, data) {
        if (!value) return true
        return data.label.indexOf(value) !== -1
      },
      getNodeData(data) {
        this.listQuery.parentId = data.id
        this.currentNode = data;
        this.getList()
      },
      getNodeFormData(data){
        this.dialog${ClassName}Visible = false;
        this.form.parentId = data.id;
        this.form.parentName = data.label;
      },

      handleFilter() {
        this.listQuery.page = 1;
        this.getList();
      },
      handleSizeChange(val) {
        this.listQuery.size = val;
        this.getList();
      },
      handleCurrentChange(val) {
        this.listQuery.page = val;
        this.getList();
      },
      handleEdit(row) {
        this.resetForm();
        this.dialogStatus = row && validateNotNull(row.id)? "update" : "create";
        if(this.dialogStatus == "create"){
          this.dialogFormVisible = true;
          this.form.parentId = this.currentNode.id
          this.form.parentName = this.currentNode.label;
        }else{
          find${ClassName}(row.id).then(response => {
            this.form = response.data;
            this.form.status=objectToString(this.form.status)
            this.dialogFormVisible = true;
          });
        }
      },
      handleLock: function (row) {
        lock${ClassName}(row.id).then((data) => {
          if (data.status == MSG_TYPE_SUCCESS) {
            this.getList();
          }
        });
      },
      handle${ClassName}() {
        fetch${ClassName}Tree({extId: this.form.id}).then(response => {
          this.tree${ClassName}Data = parseTreeData(response.data);
          this.dialog${ClassName}Visible = true;
        })
      },
      handleDelete(row) {
        this.$confirm('此操作将永久删除, 是否继续?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          remove${ClassName}(row.id).then(() => {
            if (data.status == MSG_TYPE_SUCCESS) {
              this.getList();
            }
          })
        })
      },
      save() {
        const set = this.$refs;
        set['form'].validate(valid => {
          if (valid) {
            save${ClassName}(this.form).then(() => {
              this.getList()
              this.dialogFormVisible = false;
            })
          } else {
            return false;
          }
        });
      },
      cancel() {
        this.dialogFormVisible = false;
        this.$refs['form'].resetFields();
      },
      resetForm() {
        this.form = {
          <#list table.columnList as c>
        <#if c.isEdit?? && c.isEdit == 1 && (c.isNotBaseTreeField || c.simpleJavaField == 'name' || c.simpleJavaField == 'sort') && (c.isNotBaseField || c.simpleJavaField == 'description')>
        ${c.javaFieldId}: "",
        </#if>
        </#list>
        }
        if(this.$refs['form']){
          this.$refs['form'].resetFields();
        }
      }
    }
  }
</script>
]]>
    </content>
</template>
