<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>entity</name>
    <filePath>src/main/java/${packageName}/${moduleName}/domain/${subModuleName}</filePath>
    <fileName>${ClassName}.java</fileName>
    <content><![CDATA[
/**
 * Copyright &copy; 2018 <a href="https://github.com/somewhereMrli/albedo-boot">albedo-boot</a> All rights reserved.
 */
package ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>;

import DataEntity;
import com.albedo.java.common.data.persistence.pk.IdGen;
import com.albedo.java.util.annotation.DictType;
import com.albedo.java.util.annotation.SearchField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotBlank;
import org.hibernate.validator.constraints.Email;
import javax.validation.constraints.NotNull;

import javax.persistence.*;
import java.util.Date;
import java.util.Objects;



/**
 * ${functionName}Entity ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Entity
@Table(name = "${table.name}")
@DynamicInsert @DynamicUpdate
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Data @ToString @NoArgsConstructor @AllArgsConstructor
public class ${ClassName} extends IdEntity<${ClassName}> {

	private static final long serialVersionUID = 1L;
	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField>
	/** F_${column.constantJavaField} ${column.nameAndTitle} */
	public static final String F_${column.constantJavaField} = "${column.simpleJavaField}";
		</#if>
	</#list>

	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField>
	/** F_SQL_${column.constantJavaField} ${column.nameAndTitle} */
	public static final String F_SQL_${column.constantJavaField} = "${column.name}";
		</#if>
	</#list>

	<@generateFields/>
	<@generateCompositeIdConstructorIfis/>
	@PrePersist
	public void prePersist() {
		<#if table.pkJavaType = 'String'>
		this.id = IdGen.uuid();
		</#if>
	}
	@Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ${ClassName} idEntity = (${ClassName}) o;
        if (idEntity.getId() == null || getId() == null) {
            return false;
        }
        return Objects.equals(getId(), idEntity.getId());
    }
    @Override
    public int hashCode() {
        return Objects.hashCode(getId());
    }
}
<#macro generateFields>
	//columns START
	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField>
	/** ${column.simpleJavaField} ${column.title} */<#if table.parentExists && table.parentTableFk == column.name>
	@ManyToOne(fetch = FetchType.LAZY)@JoinColumn(name = "${table.parentTableFk}")@NotFound(action = NotFoundAction.IGNORE)
	private ${table.parent.className} ${column.simpleJavaField};
	<#elseif column.showType == "userselect" || column.showType == "orgselect" || column.showType == "areaselect">
	@ManyToOne@JoinColumn(name = "${column.name}", updatable = false, insertable=false)@NotFound(action = NotFoundAction.IGNORE)
	private ${column.simpleJavaType} ${column.simpleJavaField};
	@Column(name = "${column.name}")
	private String ${column.simpleJavaField}Id;
	<#else>${column.hibernateValidatorExprssion}<#if column.isDateTimeColumn>@Temporal(TemporalType.DATE)</#if>@Column(name = "${column.name}", unique = ${column.unique?string}, nullable = ${column.nullable?string}<#if column.javaType = 'String'>, length = ${column.size}</#if>)<#if column.unique>@SearchField</#if><#if column.dictType?? && column.dictType != "">@DictType(name="${column.dictType}")</#if>
	private ${column.simpleJavaType} ${column.simpleJavaField};
			</#if>
		</#if>
	</#list>
	<#list table.childList as c>
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch = FetchType.LAZY, mappedBy = "${c.parentTableJavaFieldFk?uncap_first}")
	@NotFound(action = NotFoundAction.IGNORE)
	@Where(clause = "status_='" + FLAG_NORMAL + "'")
	@Fetch(FetchMode.SUBSELECT)
	private List<${c.className}> ${c.className?uncap_first}List = Lists.newArrayList();
	</#list>
	//columns END
</#macro>
<#macro generateCompositeIdConstructorIfis>

	<#if table.compositeId>
	public ${ClassName}(${ClassName}Id id) {
		this.id = id;
	}
	<#else>
	public ${ClassName}(${table.pkJavaType} id) {
		this.id = id;
	}
	</#if>
</#macro>
<#macro generatePkProperties>
	<#if table.compositeId>
	public ${ClassName}Id getId() {
		return this.id;
	}

	public void setId(${ClassName}Id id) {
		this.id = id;
	}
	<#else>
	/** ${table.pkColumn.simpleJavaField} ${table.pkColumn.comments} */
	public void setId(${table.pkColumn.javaType} value) {
		this.id = value;
	}
	/** ${table.pkColumn.simpleJavaField} ${table.pkColumn.comments} */
	public ${table.pkColumn.javaType} getId() {
		return this.id;
	}
	</#if>

</#macro>

<#macro generateNotPkProperties>
	<#list table.columnList as column>
		<#if !column.pk && column.isNotBaseField>
			<#if table.parentExists && table.parentTableFk == column.name>
	/** ${column.simpleJavaField} ${column.title} */
	public ${table.parent.className} get${column.simpleJavaField?cap_first}() {
		return ${column.simpleJavaField};
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}(${table.parent.className} ${column.simpleJavaField}) {
		this.${column.simpleJavaField} = ${column.simpleJavaField};
	}
			<#else>
	/** ${column.simpleJavaField} ${column.title} */
	public ${column.javaType} get${column.simpleJavaField?cap_first}() {
		return this.${column.simpleJavaField};
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}(${column.javaType} value) {
		this.${column.simpleJavaField} = value;
	}
			</#if>
			<#if column.showType == "userselect" || column.showType == "orgselect" || column.showType == "areaselect">
	/** ${column.simpleJavaField} ${column.title} */
	public String get${column.simpleJavaField?cap_first}Id() {
		return this.${column.simpleJavaField}Id;
	}
	/** ${column.simpleJavaField} ${column.title} */
	public void set${column.simpleJavaField?cap_first}Id(String value) {
		this.${column.simpleJavaField}Id = value;
	}
			</#if>
		</#if>
	</#list>
	<#list table.childList as table>
	public List<${table.className}> get${table.className}List() {
		return ${table.className?uncap_first}List;
	}

	public void set${table.className}List(List<${table.className}> ${table.className?uncap_first}List) {
		this.${table.className?uncap_first}List = ${table.className?uncap_first}List;
	}
	</#list>
</#macro>
]]>
    </content>
</template>
