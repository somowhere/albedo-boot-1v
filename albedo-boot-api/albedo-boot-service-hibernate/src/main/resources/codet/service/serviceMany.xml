<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>serviceMany</name>
    <filePath>src/main/java/${packageName}/${moduleName}/service/${subModuleName}</filePath>
    <fileName>${ClassName}Service.java</fileName>
    <content><![CDATA[
/**
 * Copyright &copy; 2018 <a href="https://github.com/somewhereMrli/albedo-boot">albedo-boot</a> All rights reserved.
 */
package ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.*;
import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.albedo.java.util.StringUtil;
import com.albedo.java.util.exception.RuntimeMsgException;
import com.albedo.java.common.domain.base.BaseEntity;
import com.albedo.java.util.domain.PageModel;
import com.albedo.java.common.data.mybatis.persistence.SpecificationDetail;

import com.albedo.java.common.security.SecurityUtil;
import DataVoService;
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Vo;
import ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
<#if table.compositeId>
import ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Id;
</#if>
<#list table.childList as table>
import ${packageName}.${moduleName}.domain<#if subModuleName != "">.${subModuleName}</#if>.${table.className};
</#list>
import ${packageName}.${moduleName}.repository.${ClassName}Repository;
import com.google.common.collect.Lists;

/**
 * ${functionName}Service ${functionNameSimple}
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
public class ${ClassName}Service extends DataVoService<${ClassName}Repository, ${ClassName}, String, ${ClassName}Vo{

	<#list table.childList as c>
	@Resource
	private ${c.className}Repository ${c.className}Repository;
	</#list>

	@Resource
    private ${ClassName}Service ${className}Service;

	/** 保存${functionNameSimple}
	 *
	 * @param ${className} 实体${functionNameSimple}
	 * @return */
    public ${ClassName} save(${ClassName} ${className}) {
    	<#list table.childList as table>
		List<${table.className}> ${table.className?uncap_first}List = ${className}.get${table.className}List();
		${className}.set${table.className}List(null);
		</#list>
        ${className} = ${className}Repository.save(${className});
        log.debug("Save Information for ${ClassName}: {}", ${className});
        <#list table.childList as table>
		if (PublicUtil.isNotEmpty(${table.className?uncap_first}List)) {
			for (${table.className} ${table.className} : ${table.className?uncap_first}List) {
				<#if table.parentExists>
					<#list table.columnList as cc>
						<#if table.parentTableFk == cc.name>
				${table.className}.set${cc.simpleJavaField?cap_first}(${className});
						</#if>
					</#list>
				</#if>
			}
			${table.className}Service.save(${table.className?uncap_first}List);
		}
		</#list>
        return ${className};
    }


    public void delete(String ids) {
    	Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)).forEach(id ->{
    		${className}Repository.findOneById(id).map(u -> {
    		<#if table.childeExists>
			${ClassName} ${className} = find(${className}Id);
			<#list table.childList as c>
				List<${c.className}> ${c.className?uncap_first}List = ${className}.get${c.className}List();
				for (${c.className} ${c.className} : ${c.className?uncap_first}List) {
				${c.className}Service.deleteById(${c.className}.getId());
				}
			</#list>
			</#if>
    			deleteById(id, SecurityUtil.getCurrentAuditor());
                log.debug("Deleted ${ClassName}: {}", u);
				return u;
			}).orElseThrow(() -> new RuntimeMsgException("${functionNameSimple} " + id + " 信息为空，删除失败"));
    	});
    }


	public void lockOrUnLock(String ids) {
		Lists.newArrayList(ids.split(StringUtil.SPLIT_DEFAULT)).forEach(id ->{
			${className}Repository.findOneById(id).map(u -> {
    			operateStatusById(id, BaseEntity.FLAG_NORMAL.equals(u.getStatus()) ? BaseEntity.FLAG_UNABLE : BaseEntity.FLAG_NORMAL, SecurityUtil.getCurrentAuditor());
                log.debug("LockOrUnLock User: {}", u);
				return u;
			}).orElseThrow(() -> new RuntimeMsgException("${functionNameSimple} " + id + " 信息为空，操作失败"));
    	});
	}

	@Transactional(readOnly=true)
	public ${ClassName} findOne(String id) {
		return ${className}Repository.findOne(id);
	}

	@Transactional(readOnly=true)
	public Page<${ClassName}> findAll(SpecificationDetail<${ClassName}> spec, PageModel<${ClassName}> pm) {
		return ${className}Repository.findAll(spec, pm);
	}
}
]]>
    </content>
</template>
