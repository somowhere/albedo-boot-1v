<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>resource</name>
    <filePath>src/test/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
    <fileName>${ClassName}ResourceIntTest.java</fileName>
    <content><![CDATA[
/**
 * Copyright &copy; 2018 <a href="https://github.com/somewhereMrli/albedo-boot">albedo-boot</a> All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import com.albedo.java.common.config.AlbedoProperties;
import com.albedo.java.common.persistence.DynamicSpecifications;
import com.albedo.java.common.persistence.SpecificationDetail;
import com.albedo.java.common.persistence.domain.BaseEntity;
import ${packageName}.${moduleName}.domain.${ClassName};
import ${packageName}.${moduleName}.domain.vo<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Vo;
import ${packageName}.${moduleName}.repository<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Repository;
import ${packageName}.${moduleName}.service<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Service;
import ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Resource;
import com.albedo.java.util.Json;
import com.albedo.java.util.base.Encodes;
import com.albedo.java.util.base.Reflections;
import com.albedo.java.util.PublicUtil;
import com.albedo.java.util.DateUtil;
import com.albedo.java.util.config.SystemConfig;
import com.albedo.java.util.domain.QueryCondition;
import com.albedo.java.web.rest.ExceptionTranslator;
import com.albedo.java.web.rest.TestUtil;
import com.google.common.collect.Lists;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;
import com.baomidou.mybatisplus.mapper.Condition;

import java.util.Date;
import java.util.List;

import static com.albedo.java.web.rest.TestUtil.createFormattingConversionService;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Test class for the ${ClassName}Resource REST controller.
 *
 * @see ${ClassName}Resource
 */
@RunWith(SpringRunner.class)
@SpringBootTest(classes = ${applicationName}.class)
public class ${ClassName}ResourceIntTest {

    private String DEFAULT_API_URL;
    <#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		<#if column.simpleJavaType == "Integer" || column.simpleJavaField == 'sort'>
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final int DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final int UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Double">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final double DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final double UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Float">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final float DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final float UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Long">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final long DEFAULT_${column.constantJavaField} = 0;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final long UPDATED_${column.constantJavaField} = 1;
		<#elseif column.simpleJavaType == "Date">
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final ${column.simpleJavaType} DEFAULT_${column.constantJavaField} = PublicUtil.parseDate(PublicUtil.fmtDate(PublicUtil.getCurrentDate()));
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final ${column.simpleJavaType} UPDATED_${column.constantJavaField} = DateUtil.addDays(DEFAULT_${column.constantJavaField}, 1);
		<#else>
	/** DEFAULT_${column.constantJavaField} ${column.nameAndTitle} */
	private static final ${column.simpleJavaType} DEFAULT_${column.constantJavaField} = <#if column.name?contains('mail')>"1@albedo.com"<#else>"A"</#if>;
	/** UPDATED_${column.constantJavaField} ${column.nameAndTitle} */
    private static final ${column.simpleJavaType} UPDATED_${column.constantJavaField} = <#if column.name?contains('mail')>"2@albedo.com"<#else>"B"</#if>;
		</#if>
		</#if>
	</#list>

    @Autowired
    private ${ClassName}Repository ${className}Repository;

    @Autowired
    private ${ClassName}Service ${className}Service;

    @Autowired
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Autowired
    private ExceptionTranslator exceptionTranslator;

    @Autowired
    private AlbedoProperties albedoProperties;

    private MockMvc rest${ClassName}MockMvc;

    private ${ClassName} ${className};

    @Before
    public void setup() {
        ${className}Repository.delete(null);
        DEFAULT_API_URL = albedoProperties.getAdminPath("/${urlPrefix}/");
        MockitoAnnotations.initMocks(this);
        final ${ClassName}Resource ${className}Resource = new ${ClassName}Resource(${className}Service);
        this.rest${ClassName}MockMvc = MockMvcBuilders.standaloneSetup(${className}Resource)
            .addPlaceholderValue("albedo.adminPath", albedoProperties.getAdminPath())
            .setControllerAdvice(exceptionTranslator)
            .setConversionService(createFormattingConversionService())
            .setMessageConverters(jacksonMessageConverter)
            .build();
        SecurityContext securityContext = SecurityContextHolder.createEmptyContext();
        securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("admin", "111111"));
        SecurityContextHolder.setContext(securityContext);
    }

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static ${ClassName} createEntity() {
        ${ClassName} ${className} = Reflections.createObj(${ClassName}.class, Lists.newArrayList(
    <#assign firstListField = true>
    <#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>${ClassName}.F_${column.constantJavaField}
		</#if>
	</#list>
        ), <#assign firstListField = true><#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>DEFAULT_${column.constantJavaField}
		</#if>
	</#list>);
        return ${className};
    }

    @Before
    public void initTest() {
        ${className} = createEntity();
    }

    @Test
    @Transactional
    public void create${ClassName}() throws Exception {
        int databaseSizeBeforeCreate = ${className}Service.findAll().size();
        ${ClassName}Vo ${className}Vo = ${className}Service.copyBeanToVo(${className});
        // Create the ${ClassName}
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Vo)))
            .andExpect(status().isOk());
        ;
        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.findAll(
            Condition.create().orderBy(${ClassName}.F_CREATEDDATE, true)

        );
        assertThat(${className}List).hasSize(databaseSizeBeforeCreate + 1);
        ${ClassName} test${ClassName} = ${className}List.get(${className}List.size() - 1);
    <#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		assertThat(test${ClassName}.get${column.simpleJavaField?cap_first}()).isEqualTo(DEFAULT_${column.constantJavaField});
		</#if>
	</#list>
    }
<#list table.columnList as column>
    <#if column.isEdit?? && column.isEdit == 1 && column.unique && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
    @Test
    @Transactional
    public void create${ClassName}WithExisting${column.simpleJavaField?cap_first}() throws Exception {
        ${className}Repository.insert(${className});
        int databaseSizeBeforeCreate = ${className}Service.findAll().size();

        // Create the ${ClassName} with an existing ID
        ${ClassName}Vo ${className}Vo = Reflections.createObj(${ClassName}Vo.class, Lists.newArrayList(${ClassName}Vo.F_ID, ${ClassName}Vo.F_${column.constantJavaField}),
            null, ${className}.get${column.simpleJavaField?cap_first}());

        // An entity with an existing ID cannot be created, so this API call must fail
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Vo)))
            .andExpect(status().isBadRequest());

        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.findAll();
        assertThat(${className}List).hasSize(databaseSizeBeforeCreate);
    }
    </#if>
</#list>

<#list table.columnList as column>
    <#if column.isEdit?? && column.isEdit == 1 && !column.nullable && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'description')>
    @Test
    @Transactional
    public void check${column.simpleJavaField?cap_first}IsRequired() throws Exception {
        int databaseSizeBeforeTest = ${className}Service.findAll().size();
        // set the field null
        ${className}.set${column.simpleJavaField?cap_first}(null);

        // Create the ${ClassName}, which fails.

        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className})))
            .andExpect(status().isBadRequest());

        List<${ClassName}> ${className}List = ${className}Service.findAll();
        assertThat(${className}List).hasSize(databaseSizeBeforeTest);
    }
    </#if>
</#list>


    @Test
    @Transactional
    public void getAll${ClassName}s() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.[*].${column.simpleJavaField}").value(hasItem(${className}.get${column.simpleJavaField?cap_first}())))
        <#elseif column.isEdit?? && column.isEdit == 1 && column.nullable && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.[*].${column.simpleJavaField}").value(hasItem(<#if column.simpleJavaType == "Date">PublicUtil.fmtDate(DEFAULT_${column.constantJavaField})<#else>DEFAULT_${column.constantJavaField}</#if>)))
        </#if>
    </#list>;
    }

    @Test
    @Transactional
    public void get${ClassName}() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get the ${className}
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"{id}", ${className}.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.${column.simpleJavaField}").value(${className}.get${column.simpleJavaField?cap_first}()))
        <#elseif column.isEdit?? && column.isEdit == 1 && column.nullable && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.${column.simpleJavaField}").value(<#if column.simpleJavaType == "Date">DEFAULT_${column.constantJavaField}.getTime()<#else>DEFAULT_${column.constantJavaField}</#if>))
        </#if>
    </#list>;
    }
<#list table.columnList as column>
    <#if column.isEdit?? && column.isEdit == 1 && column.nullable && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}IsEqualToSomething() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List where ${column.simpleJavaField} equals to DEFAULT_${column.constantJavaField}
        default${ClassName}ShouldBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.eq, PublicUtil.fmtDate(DEFAULT_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
        QueryCondition.eq(${ClassName}.F_${column.constantJavaField}, DEFAULT_${column.constantJavaField})
        </#if>);

        // Get all the ${className}List where ${column.simpleJavaField} equals to UPDATED_${column.constantJavaField}
        default${ClassName}ShouldNotBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.eq, PublicUtil.fmtDate(UPDATED_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
        QueryCondition.eq(${ClassName}.F_${column.constantJavaField}, UPDATED_${column.constantJavaField})
        </#if>);
    }

    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}IsInShouldWork() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List where ${column.simpleJavaField} in DEFAULT_${column.constantJavaField} or UPDATED_${column.constantJavaField}
        default${ClassName}ShouldBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.in, PublicUtil.fmtDate(DEFAULT_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.in(${ClassName}.F_${column.constantJavaField}, Lists.newArrayList(DEFAULT_${column.constantJavaField}, DEFAULT_${column.constantJavaField}))
        </#if>);

        // Get all the ${className}List where ${column.simpleJavaField} equals to UPDATED_${column.constantJavaField}
        default${ClassName}ShouldNotBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.in, PublicUtil.fmtDate(UPDATED_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.in(${ClassName}.F_${column.constantJavaField}, Lists.newArrayList(UPDATED_${column.constantJavaField}))
        </#if>);
    }

    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}IsNullOrNotNull() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List where ${column.simpleJavaField} is not null
        default${ClassName}ShouldBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()), QueryCondition.isNotNull(${ClassName}.F_${column.constantJavaField}));

        // Get all the ${className}List where ${column.simpleJavaField} is null
        default${ClassName}ShouldNotBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()), QueryCondition.isNull(${ClassName}.F_${column.constantJavaField}));
    }
    <#if column.simpleJavaType == "Integer" ||  column.simpleJavaType == "Double" ||  column.simpleJavaType == "Float" ||  column.simpleJavaType == "Date">
    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}IsGreaterThanOrEqualToSomething() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List where ${column.simpleJavaField} greater than or equals to DEFAULT_${column.constantJavaField}
        default${ClassName}ShouldBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.ge, PublicUtil.fmtDate(DEFAULT_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.ge(${ClassName}.F_${column.constantJavaField}, DEFAULT_${column.constantJavaField})
        </#if>);

        // Get all the ${className}List where ${column.simpleJavaField} greater than or equals to UPDATED_${column.constantJavaField}
        default${ClassName}ShouldNotBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.ge, PublicUtil.fmtDate(UPDATED_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.ge(${ClassName}.F_${column.constantJavaField}, UPDATED_${column.constantJavaField})
        </#if>);
    }

    @Test
    @Transactional
    public void getAll${ClassName}sBy${column.simpleJavaField?cap_first}IsLessThanSomething() throws Exception {
        // Initialize the database
        ${className}Repository.insert(${className});

        // Get all the ${className}List where ${column.simpleJavaField} less than or equals to DEFAULT_SORT
        default${ClassName}ShouldNotBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.lt, PublicUtil.fmtDate(DEFAULT_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.lt(${ClassName}.F_${column.constantJavaField}, DEFAULT_${column.constantJavaField})
        </#if>);

        // Get all the ${className}List where ${column.simpleJavaField} less than or equals to UPDATED_SORT
        default${ClassName}ShouldBeFound(QueryCondition.eq(${ClassName}.F_ID, ${className}.getId()),
        <#if column.simpleJavaType == "Date">
        new QueryCondition(${ClassName}.F_${column.constantJavaField}, QueryCondition.Operator.lt, PublicUtil.fmtDate(UPDATED_${column.constantJavaField}), SystemConfig.TYPE_DATE)
        <#else>
         QueryCondition.lt(${ClassName}.F_${column.constantJavaField}, UPDATED_${column.constantJavaField})
        </#if>);
    }
    </#if>
    </#if>
</#list>

    /**
     * Executes the search, and checks that the default entity is returned
     */
    private void default${ClassName}ShouldBeFound(QueryCondition... queryCondition) throws Exception {
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL).param("queryConditionJson", Json.toJSONString(Lists.newArrayList(queryCondition))))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.data").isArray())
    <#list table.columnList as column>
        <#if column.pk>
            .andExpect(jsonPath("$.data.[*].${column.simpleJavaField}").value(hasItem(${className}.get${column.simpleJavaField?cap_first}())))
        <#elseif column.isEdit?? && column.isEdit == 1 && column.nullable && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'description')>
            .andExpect(jsonPath("$.data.[*].${column.simpleJavaField}").value(hasItem(<#if column.simpleJavaType == "Date">PublicUtil.fmtDate(DEFAULT_${column.constantJavaField})<#else>DEFAULT_${column.constantJavaField}</#if>)))
        </#if>
    </#list>;
    }

    /**
     * Executes the search, and checks that the default entity is not returned
     */
    private void default${ClassName}ShouldNotBeFound(QueryCondition... queryCondition) throws Exception {
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL).param("queryConditionJson", Json.toJSONString(Lists.newArrayList(queryCondition))))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
            .andExpect(jsonPath("$.data").isArray())
            .andExpect(jsonPath("$.data").isEmpty());
    }


    @Test
    @Transactional
    public void getNonExisting${ClassName}() throws Exception {
        // Get the ${className}
        rest${ClassName}MockMvc.perform(get(DEFAULT_API_URL+"{id}", Long.MAX_VALUE))
            .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void update${ClassName}() throws Exception {
        // Initialize the database
        ${className}Service.save(${className});

        int databaseSizeBeforeUpdate = ${className}Service.findAll().size();

        // Update the ${className}
        ${ClassName} updated${ClassName} = ${className}Service.findOne(${className}.getId());
        // Disconnect from session so that the updates on updated${ClassName} are not directly saved in db
        Reflections.updateObj(updated${ClassName}, Lists.newArrayList(
    <#assign firstListField = true>
    <#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>${ClassName}.F_${column.constantJavaField}
		</#if>
	</#list>
        ), <#assign firstListField = true><#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		<#if firstListField> <#assign firstListField = false><#else>,</#if>UPDATED_${column.constantJavaField}
		</#if>
	</#list>);

        ${ClassName}Vo ${className}Vo = ${className}Service.copyBeanToVo(updated${ClassName});
        rest${ClassName}MockMvc.perform(post(DEFAULT_API_URL)
            .contentType(TestUtil.APPLICATION_JSON_UTF8)
            .content(TestUtil.convertObjectToJsonBytes(${className}Vo)))
            .andExpect(status().isOk());

        // Validate the ${ClassName} in the database
        List<${ClassName}> ${className}List = ${className}Service.findAll();
        assertThat(${className}List).hasSize(databaseSizeBeforeUpdate);

        ${ClassName} test${ClassName} = ${className}List.stream().filter(item->${className}.getId().equals(item.getId())).findAny().get();
    <#list table.columnList as column>
		<#if column.isEdit?? && column.isEdit == 1 && ((column.isNotBaseField && column.isNotBaseTreeField) || column.simpleJavaField == 'name' || column.simpleJavaField == 'sort' || column.simpleJavaField == 'parentId' || column.simpleJavaField == 'description')>
		assertThat(test${ClassName}.get${column.simpleJavaField?cap_first}()).isEqualTo(UPDATED_${column.constantJavaField});
		</#if>
	</#list>
    }


    @Test
    @Transactional
    public void delete${ClassName}() throws Exception {
        // Initialize the database
        ${className}Service.save(${className});
        SpecificationDetail<${ClassName}> spec = DynamicSpecifications.bySearchQueryCondition(
            QueryCondition.ne(BaseEntity.F_STATUS, BaseEntity.FLAG_DELETE));
        int databaseSizeBeforeDelete = ${className}Service.findAll(spec).size();

        // Get the ${className}
        rest${ClassName}MockMvc.perform(delete(DEFAULT_API_URL+"{id}", ${className}.getId())
            .accept(TestUtil.APPLICATION_JSON_UTF8))
            .andExpect(status().isOk());

        // Validate the database is empty
        List<${ClassName}> ${className}List = ${className}Service.findAll(spec);
        assertThat(${className}List).hasSize(databaseSizeBeforeDelete - 1);
    }

    @Test
    @Transactional
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(${ClassName}.class);
        ${ClassName} ${className}1 = new ${ClassName}();
        ${className}1.setId("id1");
        ${ClassName} ${className}2 = new ${ClassName}();
        ${className}2.setId(${className}1.getId());
        assertThat(${className}1).isEqualTo(${className}2);
        ${className}2.setId("id2");
        assertThat(${className}1).isNotEqualTo(${className}2);
        ${className}1.setId(null);
        assertThat(${className}1).isNotEqualTo(${className}2);
    }

}]]>
    </content>
</template>
